// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  avatarUrl     String?
  timezone      String    @default("UTC")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  tasks         Task[]
  pomodoroSessions PomodoroSession[]
  userAchievements UserAchievement[]
  
  @@map("users")
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  userId      String
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  pomodoroSessions PomodoroSession[]
  
  @@index([userId])
  @@map("tasks")
}

model PomodoroSession {
  id          String    @id @default(uuid())
  userId      String
  taskId      String
  startTime   DateTime  @default(now())
  endTime     DateTime?
  duration    Int       // in minutes
  status      SessionStatus @default(IN_PROGRESS)
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([taskId])
  @@index([startTime])
  @@map("pomodoro_sessions")
}

enum SessionStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Achievement {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  iconUrl     String?
  criteria    String    // JSON string describing unlock criteria
  createdAt   DateTime  @default(now())
  
  userAchievements UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id            String    @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime  @default(now())
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@index([userId])
  @@map("user_achievements")
}
